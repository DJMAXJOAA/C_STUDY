오전 9:25 2023-04-27	1교시 자료형, 변수 53p~59p	
★변수를 선언 할때는 블럭의 위치를 꼭 유의해주기 (블럭의 위치에 따라 인식을 할 수도, 못할수도)
선언부는 왠만한 경우 아니면 앞에 두어야 한다

★변수가 선언 되면, 변수에 메모리가 할당이 된다
그러나 블럭 공간에서 벗어나게 되면 할당된 메모리가 사라짐

★예외적인 경우를 꼭 잘 대비하기(조금의 확률이 있는 오류들)
자료형의 최대치를 값이 아니라 값을 표현한 상수로 표현
자료형보다 이상한 결과가 나올수도 있음(오버플로우 대처)

%s는 문자열 string %c는 문자 character
ctrl shift s 전체 저장 생활화 하기
\n 줄바꿈 \b 백스페이스 하나 지우기 덮어씌우는거 주의 \r 맨 앞으로 이동 이것도 백스페이스처럼 덮어씌움 
================================================================================
오전 10:03 2023-04-27	2교시 자료형, unsigned, 문자열 저장 59p~63p
★3+1 3+1 사용을 하지 않아도, 안쓰는 1바이트를 붙여서 4바이트 단위로(아니면 3+3+2 8바이트로)
대표적으로 텍스쳐,쉐이더 작업할때 (4바이트 단위로 움직이는게 빨라서)

★long long(큰값 표현)의 표시제한을 넘게 되는 경우 : 하나의 long long 변수를 추가로 사용하여 표현한다

★unsigned는 정수형만 표현 가능(실수는 범위가 너무 커서 불가)
unsigned는 맨 앞의 부호비트가 0이냐, 1이냐 (unsigned는 부호비트의 사용 여부)

★실수형에서 float형은 잘 사용되지 않는다 3D 프로그램 정도는 ㄱㅊ
어플 제작시, 인공지능~ 최소 double형은 되어야 수학이나 과학에서 사용되는 수를 표기가능 = 기본형은 double로 사용한다

★자료형을 구분해서 쓰는 이유 : 변수 하나하나의 차이는 크진 않겠지만, 그 갯수가 많아지면 낭비되는 공간이 굉장히 크다

★0.1을 10번 더하면 1또는 1.0이 맞다 O,X -> 아니다, 소수 자료형에서는 정확히 0.1, 1.0으로 표현이 되지 않는다!
그래서 float나 실수 자료형을 사용하면 =로 판정이 아니라 범위 (< , >)로 판정해야한다!!
float는 7자리까지 소수 표현, double은 15자리까지 표현하게 되는데, 이 값이 넘어가는 범위로는 신용할수 없는 데이터임
이 오차 값은 감안하고 안고가는 문제(크게 해결방법이 없는)

★변수를 선언하고 메모리 할당을 시켜줄 때, 습관적으로 값을 꼭 넣어서 초기화를 시켜줘야 한다. 
무의식적으로 할당만 시키고 사용하게 되면, 초기화 되지 않은 쓰레기 값이 출력될 수도 있다. (근데 컴파일러가 잡아주기는 함)
확실한 방법은 변수 선언시와 동시에 값을 넣어서 초기화를 함께 해주는 습관 (값을 모르면 0)

★문자열을 사용할 때에는 꼭 글자의 숫자+1 크기로 선언시켜주어야 한다(뒤에 보이지 않는 \0 리터럴이 들어가있어서)
주소값을 전달하는 과정에서 크기보다 더 큰 \0(문자열을 끝내는 기호)
================================================================================
오전 11:10 2023-04-27	3교시 문자열 저장, const, 예약어와 식별자 scanf 63p~77p

★배열은 대입 연산자를 사용할 수 없다.
정확히는 초기 선언 때는 가능하다. 하지만 그 뒤에 새로 대입하는 것이 불가능하다.

★#include <string.h> 문자열을 다룰수 있는 헤더파일
strcpy(name, "kim"); 새로운 문자열 추가 (string copy 문자열복사)

★const는 상수기 때문에 꼭 선언과 동시에 값을 초기화 시켜주어야 한다.

★예약어는 식별자로 사용 ㄴㄴㄴ (ex: int main을 변수로 사용 불가)
혹시나 이를 피하기 위해 변수 이름을 길게 사용 (ex: char sName / strName / Name / _name) 보통은 컴파일러가 걸러주기는 함

★실수로 자료형에 맞지 않는 값을 넣을 수도 있음. 이를 방지하기 위해 변수 이름을 알기 쉽게!! 최대한 길게 목적을 알기쉽게
그래서 암묵적인 규칙으로 int는 iNumber (정수)
char cA (단일문자) char sName/strName (문자열)
float fNumber, double dNumber(실수형)
카멜 표기법 totalNumber, 파스칼 표기법TotalNumber, 헝가리안 표기법strNumber, 스네이크 표기법total_number
( _아닌 -는 안댐 my-student) (맨 처음이 숫자면 안댐 0student) (빈칸이 있으면 안댐)

★모든 함수에 반환값이 있음. 하지만 void 함수에는 리턴값이 없음
main함수에는 int와 void함수 두가지만 사용한다.
main에서 return은 보편적으로 return 0;을 반환하면 무난

★scanf에서 반환을 제대로 하면 1, 반환을 제대로 안하면 0
(ex : 정수 자료형을 받아야 하는데, 문자열을 받으면 0)
= 대부분의 함수들은 리턴값을 가지고 있다는것을 확인할 수 있다 (printf도 그렇고 대부분 확인 가능)

★scanf에서 문자열 입력시에는 &를 붙이지 않는다!
&는 주소를 나타내는데, 문자열은 이미 배열로 선언되어 이미 주소값이 입력되었기 때문에 (이미 그 자체가 주소기 때문에)

★변수 이름을 지을 때 한글로 코드이름 작성하지 말기


%lf = long float = double 실수형 받을때 사용
================================================================================
오후 2:12 2023-04-27	4교시 산술연산자, 증감, 관계 84p~91p
★연산의 최종 자료형으로 값이 결정, 그리고 출력시킬때 %d %f 등 자료형에 맞게 확인할 것
특히 다른 유형의 자료형끼리의 연산에서 잦은 실수 => 애초에 계산을 같은 자료형끼리 연산한다
컴파일러에서 오류로 처리가 안되기 때문에 이런것을 꼭 꼭 잘 확인해야한다

★증감 연산자(++, --)는 실수형엔 사용 불가

★전위연산++a 후위연산a++ 주의해서 사용하기 -> 결과에 상당한 영향을 미칠 수 있음
증감연산의 의도를 잘 생각하고 사용하기

★불 자료형 : TRUE 1, FALSE 0
================================================================================
오후 3:12 2023-04-27	5교시 논리 연산자 92p~
★ && AND 둘다1 / || OR 하나라도1 / ! NOT 반대

★숏서킷룰 -> 논리연산자를 비교할 때, 왼쪽 좌항만 비교하여 결과를 우선적으로 판단하는 기능

★ 10 < a < 20 // 언뜻 보기엔 문제 없지만 C++에서 문제가 될수도 있음
ex)10 < 15 < 20 -----> TRUE(1) < 20 문법적으로 틀림. 주의해서 사용해야 한다
세 문자를 비교하고 싶다면 (10 < a) && (a < 20) 이런식으로 사용해야한다.

★연산을 수행 후 따로 변수에 저장하지 않는다면 결과는 바로 버려진다

★scanf에는 \n(줄바꿈) 할필요가 없음
================================================================================
오후 5:02 2023-04-27	과제1
/*
Q1 인간 수명이 100년이라고 가정하고 담배 한 개비를 피우면 수명이 3시간 40분 단축된다고 한다.
어떤 사람이 성인(20살 가정)이 된 이후 N년간 하루에 M개비씩 담배를 피웠다면
수명은 얼마나 단축되었고 몇 살 까지 살 수 있는가?
(ex) N = 20, M = 3일때
줄어든 수명 : ㅁ일 ㅁ시간 ㅁ분
기대 수명 : ㅁ살 ㅁ일 ㅁ시간 ㅁ분
*/

★미리 계산해서 값이 맞는지 확인하기 (중간중간 맞게 되고 있나 확인 유닛테스트)

★계산이 끝났으면 초기화 꼭 해주기!

★자료형의 크기 생각하기 (int, long..)

★디버깅 습관화


